{
  "name": "multi-console-log",
  "displayName": "Smart Log",
  "description": "Automating the process of writing meaningful log messages for JavaScript, TypeScript, Dart, and Swift.",
  "version": "1.0.0",
  "publisher": "AlastairMcNeill",
  "engines": {
    "vscode": "^1.50.0"
  },
  "icon": "images/icon.png",
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished",
    "onLanguage:javascript",
    "onLanguage:javascriptreact",
    "onLanguage:typescript",
    "onLanguage:typescriptreact",
    "onLanguage:dart",
    "onLanguage:swift"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Smart Log Configuration",
      "properties": {
        "smartLog.wrapLogMessage": {
          "type": "boolean",
          "default": false,
          "description": "Determine if the log message should be wrapped or not."
        },
        "smartLog.logMessagePrefix": {
          "type": "string",
          "default": "ðŸ“±",
          "description": "The prefix of the log message."
        },
        "smartLog.logMessageSuffix": {
          "type": "string",
          "default": ":",
          "description": "The suffix of the log message."
        },
        "smartLog.includeFilename": {
          "type": "boolean",
          "default": false,
          "description": "Whether to include the file name of the log message."
        },
        "smartLog.includeLineNum": {
          "type": "boolean",
          "default": false,
          "description": "Whether to include the line number of the log message."
        },
        "smartLog.addSemicolonInTheEnd": {
          "type": "boolean",
          "default": false,
          "description": "Whether to add or not a semicolon in the end of the log message."
        },
        "smartLog.insertEnclosingClass": {
          "type": "boolean",
          "default": true,
          "description": "Whether to insert or not the enclosing class of the selected variable in the log message."
        },
        "smartLog.logCorrectionNotificationEnabled": {
          "type": "boolean",
          "default": false,
          "description": "Whether to enable or disable the log correction notification."
        },
        "smartLog.insertEnclosingFunction": {
          "type": "boolean",
          "default": true,
          "description": "Whether to insert or not the enclosing function of the selected variable in the log message."
        },
        "smartLog.insertEmptyLineBeforeLogMessage": {
          "type": "boolean",
          "default": false,
          "description": "Whether to insert an empty line before the log message or not."
        },
        "smartLog.insertEmptyLineAfterLogMessage": {
          "type": "boolean",
          "default": false,
          "description": "Whether to insert an empty line after the log message or not."
        },
        "smartLog.delimiterInsideMessage": {
          "type": "string",
          "default": "~",
          "description": "The delimiter that will separate the different log message elements (file name, line number, class, function and variable)"
        },
        "smartLog.quote": {
          "type": "string",
          "enum": [
            "\"",
            "'",
            "`"
          ],
          "default": "\"",
          "description": "Double quotes, single quotes or backtick"
        },
        "smartLog.logType": {
          "type": "string",
          "enum": [
            "log",
            "warn",
            "error",
            "debug",
            "table"
          ],
          "default": "log",
          "description": "Select the log type"
        },
        "smartLog.logFunction": {
          "type": "string",
          "default": "log",
          "description": "Specify a log function (when specified logType will be ignored)"
        }
      }
    },
    "commands": [
      {
        "command": "smartLog.displayLogMessage",
        "title": "Smart Log: Display Smart Log Message"
      },
      {
        "command": "smartLog.commentAllLogMessages",
        "title": "Smart Log: Comment Smart Log Messages"
      },
      {
        "command": "smartLog.uncommentAllLogMessages",
        "title": "Smart Log: Uncomment Smart Log Messages"
      },
      {
        "command": "smartLog.deleteAllLogMessages",
        "title": "Smart Log: Delete Smart Log Messages"
      },
      {
        "command": "smartLog.correctAllLogMessages",
        "title": "Smart Log: Correct Smart Log Messages"
      }
    ],
    "keybindings": [
      {
        "command": "smartLog.displayLogMessage",
        "key": "ctrl+alt+l",
        "mac": "ctrl+alt+l"
      },
      {
        "command": "smartLog.commentAllLogMessages",
        "key": "alt+shift+c",
        "mac": "alt+shift+c"
      },
      {
        "command": "smartLog.uncommentAllLogMessages",
        "key": "alt+shift+u",
        "mac": "alt+shift+u"
      },
      {
        "command": "smartLog.deleteAllLogMessages",
        "key": "alt+shift+d",
        "mac": "alt+shift+d"
      },
      {
        "command": "smartLog.correctAllLogMessages",
        "key": "alt+shift+x",
        "mac": "alt+shift+x"
      }
    ],
    "menus": {
      "view/item/context": [
        {
          "command": "smartLog.commentAllLogMessages",
          "when": "viewItem == fileLogsNode",
          "group": "smart"
        },
        {
          "command": "smartLog.uncommentAllLogMessages",
          "when": "viewItem == fileLogsNode",
          "group": "smart"
        },
        {
          "command": "smartLog.deleteAllLogMessages",
          "when": "viewItem == fileLogsNode",
          "group": "smart"
        },
        {
          "command": "smartLog.correctAllLogMessages",
          "when": "viewItem == fileLogsNode",
          "group": "smart"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "rm -rf out && npm run esbuild-base -- --minify",
    "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
    "esbuild": "npm run esbuild-base -- --sourcemap",
    "esbuild-watch": "npm run esbuild-base -- --sourcemap --watch",
    "watch": "npm run esbuild --watch",
    "lint": "tsc --noEmit && eslint src --ext ts",
    "pretest": "yarn run esbuild-base",
    "test:compile": "rm -rf out && tsc -p ./ && mkdir out/mocha-tests/files && cp -r src/mocha-tests/files/ out/mocha-tests/files/",
    "test": "npm run test:compile && npm run test:jest && node ./out/mocha-tests/runTests.js",
    "test:jest": "jest --config jest.config.ts"
  },
  "devDependencies": {
    "@types/chai": "^5.0.0",
    "@types/glob": "^7.1.3",
    "@types/jest": "^30.0.0",
    "@types/mocha": "^8.0.0",
    "@types/node": "^24.0.3",
    "@types/vscode": "^1.50.0",
    "@typescript-eslint/eslint-plugin": "^8.32.1",
    "@typescript-eslint/parser": "^8.32.1",
    "@vscode/test-electron": "^2.4.1",
    "chai": "^4.3.7",
    "chalk": "^4.1.0",
    "esbuild": "^0.25.4",
    "eslint": "^9.27.0",
    "eslint-config-prettier": "^8.5.0",
    "eslint-plugin-prettier": "^3.1.4",
    "glob": "^7.1.6",
    "jest": "^30.0.0",
    "mocha": "^11.2.2",
    "prettier": "^3.5.3",
    "ts-jest": "^29.4.0",
    "ts-node": "^10.9.1",
    "typescript-eslint": "^8.32.1",
    "vscode-test": "^1.6.1"
  },
  "license": "SEE LICENSE IN LICENSE.txt",
  "bugs": {
    "url": "https://github.com/alastairrmcneill/smart-log/issues",
    "email": "alastair.r.mcneill@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/alastairrmcneill/smart-log"
  },
  "dependencies": {
    "typescript": "^5.8.3",
    "axios": "^1.9.0",
    "ignore": "^7.0.5",
    "p-limit": "^6.2.0"
  }
}
